SELECT user.name AS Όνομα , user.surname AS Επώνυμο , etaireia.name AS Όνομα_Εταιρείας ,job.id AS ID_θέσης ,job.salary AS Μισθός, COUNT(applies.job_id) AS Αριθμός_Αιτήσεων
FROM job INNER JOIN recruiter
ON job.recruiter = recruiter.username
INNER JOIN user 
ON recruiter.username = user.username
INNER JOIN etaireia
ON recruiter.firm = etaireia.AFM
INNER JOIN applies
ON job.id = applies.job_id
WHERE job.salary > 1900
GROUP BY applies.job_id



SELECT candidate.username AS Όνομα, candidate.certificates AS Αρχείο_Πτυχίων,has_degree.grade AS Βαθμός_Πτυχίου, COUNT(candidate.username) AS Αριθμός_Πτυχίων,
AVG(has_degree.grade) AS Μέσος_Όρος
FROM candidate INNER JOIN has_degree
ON candidate.username = has_degree.cand_usrname
GROUP BY candidate.username
HAVING COUNT(candidate.username) > 1


SELECT candidate.username,COUNT(applies.cand_usrname), AVG(job.salary)
FROM candidate INNER JOIN applies
ON candidate.username = applies.cand_usrname
INNER JOIN job
ON applies.job_id = job.id
WHERE job.salary > 1800
GROUP BY cand_usrname

####################################################################################################################################################################################################

SELECT etaireia.name,antikeim.descr, antikeim.title
FROM etaireia INNER JOIN recruiter
ON etaireia.AFM = recruiter.firm
INNER JOIN job
ON recruiter.username = job.recruiter
INNER JOIN requires
ON job.id = requires.job_id
INNER JOIN antikeim
ON requires.antikeim_title = antikeim.title
WHERE requires.antikeim_title LIKE '%Programm%' AND job.edra ='Patra, Greece'

####################################################################################################################################################################################################
SELECT recruiter,avg(salary),count(*) AS jobs,count(*) AS interviews
FROM job INNER JOIN recruiter ON recruiter.job = username.recruiter
INNER JOIN interviews ON username.recruiter = recruiter.interviews
WHERE jobs >= 2
GROUP BY recruiter
;
DELIMITER $

DROP PROCEDURE IF EXISTS proc1
DELIMITTER $
CREATE PROCEDURE proc1(jid)
BEGIN
DECLARE done BOOLEAN DEFAULT FALSE;
DECLARE appliers VARCHAR(12);
DECLARE reason TEXT;
DECLARE bad_appl BOOLEAN DEFAULT FALSE;

DECLARE crsr_appliers CURSOR FOR
SELECT cand_usrname FROM applies WHERE job_id=jid;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=TRUE;
OPEN appliers;

appl_loop : LOOP
FETCH crsr_appliers INTO appliers;

IF done THEN
LEAVE appl_loop;
END IF;

SET bad_appl = 0;
SET reason = "";

SELECT cand_usrname INTO inter_cand FROM interviews WHERE cand_usrname = appliers;
IF inter_cand IS NULL THEN
SET reason = CONCAT(reason, "not yet interviewd");
SET bad_candidate = 1;
ELSE
SELECT AVG(interviews.personality), SUM(interviews.education), SUM(interviews.experience) INTO personal, educ, exper
FROM interviews WHERE jobid=jid AND candidate = appliers;
END IF;

IF personal = 0 THEN
SET reason = CONCAT(reason,"FAILED INTERVIEW");
SET bad_candidate = 1;
END IF;

IF educ = 0 THEN
SET reason = CONCAT(reason,"INADEQUATE EDUCATION");
SET bad_candidate = 1;
END IF;
IF exper = 0 THEN
SET reason = CONCAT(reason,"NO PRIOR EXPERIENCE");
SET bad_candidate = 1;
END IF;

IF bad_candidate = 1 THEN
SELECT uname, reason;
END IF;
END LOOP;
SELECT jobid.interviews, candidate.interviews, SUM(personality,education,experience) as score, personality.interviews, education.interviews, experience.interviews, count(*) as interviewss
FROM interviews
WHERE jobid=jobid.interviews AND personality.interviews > 0 AND education.interviews > 0 AND experience.interviews > 0
GROUP BY candidate.interviews
ORDER by personality.interviews;

CLOSE appliers;
END$

